y<-as.matrix(MyData[,8])
#theta<-as.matrix(solve(t(x1)%*%x1) %*% (t(x1)%*%y))
theta_matrix1=(ginv((t(MyData[,1:7]) %*% MyData[,1:7]))) %*% t(MyData[,1:7]) %*% MyData[,8]
cat("the value of thetas from normal equation are",theta_matrix[1,],theta_matrix[2,],theta_matrix[3,],theta_matrix[4,],theta_matrix[5,],theta_matrix[6,],theta_matrix[7,])
output_2<-colSums(theta_matrix1*x[1:7])
cat("output from normal equation is",output_2)
theta_matrix1=(ginv((t(MyData[,1:2]) %*% MyData[,1:2]))) %*% t(MyData[,1:2]) %*% MyData[,3]
abline(theta_matrix1[1,],theta_matrix1[2,],col="blue")
hypothesis1<-dat[1]*theta_matrix1[1,]+dat[2]*theta_matrix1[2,]
cat("the values of theta are",theta_matrix1[1,],"and",theta_matrix1[2,])
cat("output from normal equation",hypothesis1)
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim>median(crim)]<-1
Boston
crim01[crim>median(crim)]
crim01<-rep(0,length(crim))
crim>median(crim)
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim>median(crim)]<-1
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01~.-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim>median(crim)]<-1
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01~.-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
mean(pred.glm != crim01.test)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim>median(crim)]<-1
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01~.-crim01-crim-chas-nox,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim>median(crim)]<-1
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01~ .-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm,crim01.test)
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim>median(crim)]<-1
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01~ .-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
table(pred.glm,crim01.test)
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim>median(crim)]<-1
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01~ .-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim > median(crim)] = 1
summary(crim01)
crim01
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim > median(crim)] = 1
crim01
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01 ~ .-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim > median(crim)] = 1
crim01
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01 ~ .-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
crim01<-rep(0,length(crim))
crim01[crim > median(crim)] = 1
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01 ~ .-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
fit.glm<-glm(crim01 ~ .-crim01-crim,data=Boston,family=binomial,subset=train)
fit.glm<-glm(crim01~.-crim01-crim-chas-nox,data = Boston,family = binomial, subset=train)
fit.glm<-glm(crim01~.-crim01-crim-chas-nox,data = Boston,family = binomial, subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim > median(crim)] = 1
crim01
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01 ~ .-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
fit.glm<-glm(crim01~.-crim01-crim-chas-nox,data = Boston,family = binomial, subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim > median(crim)] = 1
library(MASS)
attach(Boston)
crim01<-rep(0,length(crim))
crim01[crim > median(crim)] = 1
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01 ~ .-crim01-crim,data=Boston,family=binomial,subset=train)
fit.glm<-glm(crim01 ~ .-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
crim01<-rep(0,length(crim))
crim01[crim > median(crim)] = 1
crim01
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01 ~ .-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
fit.glm<-glm(crim01~.-crim01-crim-chas-nox,data = Boston,family = binomial, subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
fit.glm<-glm(crim01 ~ .-crim01-crim,data=Boston,family=binomial,subset=train)
probs <- predict(fit.glm,Boston.test,type="response")
pred.glm<-rep(0,length(probs))
pred.glm[probs>0.5]<-1
table(pred.glm, crim01.test)
mean(pred.glm != crim01.test)
fit.glm<-glm(crim01~.-crim01-crim-chas-nox,data = Boston,family = binomial, subset=train)
Boston <- data.frame(Boston,crim01)
train <- 1:(length(crim)/2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train<- Boston[train,]
Boston.test<-Boston[test,]
crim01.test<-crim01[test]
fit.glm<-glm(crim01 ~ .-crim01-crim,data=Boston,family=binomial,subset=train)
library(readr)
library(ggplot2)
library("magrittr")
library("dplyr")
setwd("D:/R-progrms/term project")
train <- read_csv("train.csv",
col_types = cols(id = col_skip()))
test <- read_csv("test.csv",
col_types = cols(id = col_skip()))
temp.train = train
temp.test = test
temp.train[temp.train == -1] = NA
temp.test[temp.test == -1] = NA
sum(is.na(temp.train))
sum(is.na(temp.test))
colSums(is.na(temp.train))
colSums(is.na(temp.test))
train.missing = as.data.frame(sort(colSums(is.na(temp.train)),decreasing = TRUE))
test.missing = as.data.frame(sort(colSums(is.na(temp.test)),decreasing = TRUE))
train.missing=head(train.missing)
test.missing=head(test.missing)
remove_column_train=as.matrix(colnames(t(train.missing)))
remove_column_test=as.matrix(colnames(t(test.missing)))
new_train=as.data.frame(train[,!(names(train)%in% remove_column_train)])
new_test=as.data.frame(test[,!(names(test)%in% remove_column_test)])
train.missing = train.missing[train.missing > 0]
test.missing = test.missing[test.missing > 0]
x11(width = 9,height = 8,pointsize = 15)
barplot(train.missing,main = "Missing Values per feature Training Data",ylab = "Number of Missing Values",las = 2,mgp = c(2.5,0,0))
barplot(test.missing,main = "Missing Values per feature Testing Data",ylab = "Number of Missing Values",las = 2,mgp = c(2.5,0,0))
temp.train[,c(22,3)]
temp.train = train
temp.test = test
temp.train[temp.train == -1] = NA
temp.test[temp.test == -1] = NA
sum(is.na(temp.train))
sum(is.na(temp.test))
colSums(is.na(temp.train))
colSums(is.na(temp.test))
train.missing = as.data.frame(sort(colSums(is.na(temp.train)),decreasing = TRUE))
test.missing = as.data.frame(sort(colSums(is.na(temp.test)),decreasing = TRUE))
#train.missing=head(train.missing)
#test.missing=head(test.missing)
remove_column_train=as.matrix(colnames(t(train.missing)))
remove_column_test=as.matrix(colnames(t(test.missing)))
new_train=as.data.frame(train[,!(names(train)%in% remove_column_train)])
new_test=as.data.frame(test[,!(names(test)%in% remove_column_test)])
train.missing = train.missing[train.missing > 0]
test.missing = test.missing[test.missing > 0]
x11(width = 9,height = 8,pointsize = 15)
barplot(train.missing,main = "Missing Values per feature Training Data",ylab = "Number of Missing Values",las = 2,mgp = c(2.5,0,0))
barplot(test.missing,main = "Missing Values per feature Testing Data",ylab = "Number of Missing Values",las = 2,mgp = c(2.5,0,0))
View(remove_column_test)
View(remove_column_test)
View(remove_column_test)
View(temp.train)
View(temp.train)
View(remove_column_train)
View(remove_column_test)
temp.train = train
temp.test = test
temp.train[temp.train == -1] = NA
temp.test[temp.test == -1] = NA
sum(is.na(temp.train))
sum(is.na(temp.test))
colSums(is.na(temp.train))
colSums(is.na(temp.test))
train.missing = as.data.frame(sort(colSums(is.na(temp.train)),decreasing = TRUE))
test.missing = as.data.frame(sort(colSums(is.na(temp.test)),decreasing = TRUE))
#train.missing=head(train.missing)
#test.missing=head(test.missing)
remove_column_train=as.matrix(colnames(t(train.missing)))
remove_column_test=as.matrix(colnames(t(test.missing)))
new_train=as.data.frame(train[,!(names(train)%in% remove_column_train)])
new_test=as.data.frame(test[,!(names(test)%in% remove_column_test)])
train.missing = train.missing[train.missing > 0]
test.missing = test.missing[test.missing > 0]
x11(width = 9,height = 8,pointsize = 15)
barplot(train.missing,main = "Missing Values per feature Training Data",ylab = "Number of Missing Values",las = 2,mgp = c(2.5,0,0))
barplot(test.missing,main = "Missing Values per feature Testing Data",ylab = "Number of Missing Values",las = 2,mgp = c(2.5,0,0))
temp.train[,c(22,3)]
Mode <- function (x, na.rm) {
xtab <- table(x)
xmode <- names(which(xtab == max(xtab)))
if (length(xmode) > 1) xmode <- ">1 mode"
return(xmode)
}
p=dim(new_train)
r=dim(new_test)
q=c( )
s=c()
for(i in 1:p[2])
{
q[i]<- Mode(new_train[,i])
}
for(i in 1:r[2])
{
s[i]<- Mode(new_test[,i])
}
m <- as.matrix(new_train)
for(ii in 1:p[2])
{
m[is.na(m[,ii])] <- q[ii]
}
n <- as.matrix(new_test)
for(jj in 1:r[2])
{
n[is.na(n[,jj])] <- s[jj]
}
temp.train = train
temp.test = test
temp.train[temp.train == -1] = NA
temp.test[temp.test == -1] = NA
sum(is.na(temp.train))
sum(is.na(temp.test))
colSums(is.na(temp.train))
colSums(is.na(temp.test))
train.missing = as.data.frame(sort(colSums(is.na(temp.train)),decreasing = TRUE))
test.missing = as.data.frame(sort(colSums(is.na(temp.test)),decreasing = TRUE))
#train.missing=head(train.missing)
#test.missing=head(test.missing)
remove_column_train=as.matrix(colnames(t(train.missing)))
remove_column_test=as.matrix(colnames(t(test.missing)))
new_train=as.data.frame(train[,!(names(train)%in% remove_column_train)])
new_test=as.data.frame(test[,!(names(test)%in% remove_column_test)])
train.missing = train.missing[train.missing > 0]
test.missing = test.missing[test.missing > 0]
x11(width = 9,height = 8,pointsize = 15)
barplot(train.missing,main = "Missing Values per feature Training Data",ylab = "Number of Missing Values",las = 2,mgp = c(2.5,0,0))
barplot(test.missing,main = "Missing Values per feature Testing Data",ylab = "Number of Missing Values",las = 2,mgp = c(2.5,0,0))
temp.train[,c(22,3)]
Mode <- function (x, na.rm) {
xtab <- table(x)
xmode <- names(which(xtab == max(xtab)))
if (length(xmode) > 1) xmode <- ">1 mode"
return(xmode)
}
p=dim(new_train)
r=dim(new_test)
q=c( )
s=c()
for(i in 1:p[2])
{
q[i]<- Mode(new_train[,i])
}
for(i in 1:r[2])
{
s[i]<- Mode(new_test[,i])
}
m <- as.matrix(new_train)
for(ii in 1:p[2])
{
m[is.na(m[,ii])] <- q[ii]
}
n <- as.matrix(new_test)
for(jj in 1:r[2])
{
n[is.na(n[,jj])] <- s[jj]
}
library(readr)
library(ggplot2)
library("magrittr")
library("dplyr")
setwd("D:/R-progrms/term project")
train <- read_csv("train.csv",
col_types = cols(id = col_skip()))
test <- read_csv("test.csv",
col_types = cols(id = col_skip()))
library(readr)
library(ggplot2)
library("magrittr")
library("dplyr")
setwd("D:/R-progrms/term project")
train <- read_csv("train.csv",
col_types = cols(id = col_skip()))
test <- read_csv("test.csv",
col_types = cols(id = col_skip()))
temp.train = train
temp.test = test
temp.train[temp.train == -1] = NA
temp.test[temp.test == -1] = NA
sum(is.na(temp.train))
sum(is.na(temp.test))
colSums(is.na(temp.train))
colSums(is.na(temp.test))
train.missing = as.data.frame(sort(colSums(is.na(temp.train)),decreasing = TRUE))
test.missing = as.data.frame(sort(colSums(is.na(temp.test)),decreasing = TRUE))
#train.missing=head(train.missing)
#test.missing=head(test.missing)
remove_column_train=as.matrix(colnames(t(train.missing)))
remove_column_test=as.matrix(colnames(t(test.missing)))
new_train=as.data.frame(train[,!(names(train)%in% remove_column_train)])
new_test=as.data.frame(test[,!(names(test)%in% remove_column_test)])
train.missing = train.missing[train.missing > 0]
test.missing = test.missing[test.missing > 0]
x11(width = 9,height = 8,pointsize = 15)
barplot(train.missing,main = "Missing Values per feature Training Data",ylab = "Number of Missing Values",las = 2,mgp = c(2.5,0,0))
barplot(test.missing,main = "Missing Values per feature Testing Data",ylab = "Number of Missing Values",las = 2,mgp = c(2.5,0,0))
temp.train[,c(22,3)]
Mode <- function (x, na.rm) {
xtab <- table(x)
xmode <- names(which(xtab == max(xtab)))
if (length(xmode) > 1) xmode <- ">1 mode"
return(xmode)
}
p=dim(new_train)
r=dim(new_test)
q=c( )
s=c()
for(i in 1:p[2])
{
q[i]<- Mode(new_train[,i])
}
for(i in 1:r[2])
{
s[i]<- Mode(new_test[,i])
}
m <- as.matrix(new_train)
for(ii in 1:p[2])
{
m[is.na(m[,ii])] <- q[ii]
}
n <- as.matrix(new_test)
for(jj in 1:r[2])
{
n[is.na(n[,jj])] <- s[jj]
}
View(new_test)
View(new_test)
library(readr)
library(ggplot2)
library("magrittr")
library("dplyr")
setwd("D:/R-progrms/term project")
train <- read_csv("train.csv",
col_types = cols(id = col_skip()))
test <- read_csv("test.csv",
col_types = cols(id = col_skip()))
